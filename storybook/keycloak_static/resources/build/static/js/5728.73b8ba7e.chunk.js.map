{"version":3,"file":"static/js/5728.73b8ba7e.chunk.js","mappings":"wNAEeA,GAAYC,EAAAA,EAAAA,IAAc,CAKrCC,GAAI,CACAC,wBAAyB,iCACzBC,OAAQ,SAGRC,iBAAkB,wBAEtBC,GAAI,CAEAH,wBAAyB,4CACzBC,OAAQ,QACRC,iBAAkB,qCAhBXL,Q,4HCMTO,GAAkBC,EAAAA,EAAAA,OAAK,kBAAM,8BAAN,IAMvBC,GAAQD,EAAAA,EAAAA,OAAK,kBAAK,8BAAL,IAIbE,EAA0C,CAE5C,YAAe,gBACf,qBAAwB,oBAGb,SAASC,EAAIC,GAExB,IAAQC,EAAcD,EAAdC,UAEFC,EAAOd,EAAQ,CAAEa,UAAAA,IAuBvB,OArBAE,EAAAA,EAAAA,GAAiB,CACb,UAAaF,EACb,qBAAuB,WAAvB,8BAAwB,iGAAQG,EAAR,EAAQA,qBAEtBC,EAEO,OADDD,EAEOE,EAEAC,GAKNC,SAAS,MAZF,yCAYgBH,GAZhB,uBAcGI,MAAMJ,GAdT,cAcdK,EAdc,yBAebA,EAASC,QAfI,2CAAxB,mDAAuB,KAmBd,OAATT,EAEO,MAUP,SAAC,EAAAU,SAAD,UAGiB,cADDX,EAAUY,QACW,SAAChB,EAAD,CAAaI,UAAAA,EAAWC,KAAAA,EAAMJ,QAAAA,EAAWgB,SAAUnB,EAAiBoB,iBAAe,KAC5F,SAAC,KAAD,CAAgBd,UAAAA,EAAWC,KAAAA,EAAMJ,QAAAA,EAAWgB,SAAUnB,EAAiBoB,iBAAe,KAKzH,C","sources":["keycloak-theme/login/i18n.ts","keycloak-theme/login/KcApp.tsx"],"sourcesContent":["import { createUseI18n } from \"keycloakify/login\";\n\nexport const { useI18n } = createUseI18n({\n    // NOTE: Here you can override the default i18n messages\n    // or define new ones that, for example, you would have\n    // defined in the Keycloak admin UI for UserProfile\n    // https://user-images.githubusercontent.com/6702424/182050652-522b6fe6-8ee5-49df-aca3-dba2d33f24a5.png\n    en: {\n        alphanumericalCharsOnly: \"Only alphanumerical characters\",\n        gender: \"Gender\",\n        // Here we overwrite the default english value for the message \"doForgotPassword\" \n        // that is \"Forgot Password?\" see: https://github.com/InseeFrLab/keycloakify/blob/f0ae5ea908e0aa42391af323b6d5e2fd371af851/src/lib/i18n/generated_messages/18.0.1/login/en.ts#L17\n        doForgotPassword: \"I forgot my password\",\n    },\n    fr: {\n        /* spell-checker: disable */\n        alphanumericalCharsOnly: \"Caractère alphanumérique uniquement\",\n        gender: \"Genre\",\n        doForgotPassword: \"J'ai oublié mon mot de passe\"\n        /* spell-checker: enable */\n    }\n});\n\nexport type I18n = NonNullable<ReturnType<typeof useI18n>>;\n","import { lazy, Suspense } from \"react\";\nimport type { KcContext } from \"./kcContext\";\nimport { useI18n } from \"./i18n\";\nimport Fallback, { type PageProps } from \"keycloakify/login\";\nimport {useDownloadTerms} from \"keycloakify/login/lib/useDownloadTerms\";\nimport tos_en_url from \"./assets/tos_en.md\";\nimport tos_fr_url from \"./assets/tos_fr.md\";\n\nconst DefaultTemplate = lazy(() => import(\"keycloakify/login/Template\"));\n\n// You can uncomment this to see the values passed by the main app before redirecting.  \n//import { foo, bar } from \"./valuesTransferredOverUrl\";\n//console.log(`Values passed by the main app in the URL parameter:`, { foo, bar });\n\nconst Empty = lazy(()=> import(\"./pages/Empty\"));\n\n// This is like adding classes to theme.properties \n// https://github.com/keycloak/keycloak/blob/11.0.3/themes/src/main/resources/theme/keycloak/login/theme.properties\nconst classes: PageProps<any, any>[\"classes\"] = {\n    // NOTE: The classes are defined in ./KcApp.css\n    \"kcHtmlClass\": \"my-root-class\",\n    \"kcHeaderWrapperClass\": \"my-color my-font\"\n};\n\nexport default function App(props: { kcContext: KcContext; }) {\n\n    const { kcContext } = props;\n\n    const i18n = useI18n({ kcContext });\n\n    useDownloadTerms({\n        \"kcContext\": kcContext as any,\n        \"downloadTermMarkdown\": async ({currentLanguageTag}) => {\n\n            const resource = (() => {\n                switch (currentLanguageTag) {\n                    case \"fr\":\n                        return tos_fr_url;\n                    default:\n                        return tos_en_url;\n                }\n            })();\n\n            // webpack5 (used via storybook) loads markdown as string, not url\n            if (resource.includes(\"\\n\")) return resource\n\n            const response = await fetch(resource);\n            return response.text();\n        },\n    });\n\n    if (i18n === null) {\n        //NOTE: Locales not yet downloaded, we could as well display a loading progress but it's usually a matter of milliseconds.\n        return null;\n    }\n    \n    /* \n    * Examples assuming i18n.currentLanguageTag === \"en\":\n    * i18n.msg(\"access-denied\") === <span>Access denied</span>\n    * i18n.msg(\"foo\") === <span>foo in English</span>\n    */\n\n    return (\n        <Suspense>\n            {(() => {\n                switch (kcContext.pageId) {\n                    case \"empty.ftl\": return <Empty {...{ kcContext, i18n, classes }} Template={DefaultTemplate} doUseDefaultCss />;\n                    default: return <Fallback {...{ kcContext, i18n, classes }} Template={DefaultTemplate} doUseDefaultCss />;\n                }\n            })()}\n        </Suspense>\n    );\n}\n"],"names":["useI18n","createUseI18n","en","alphanumericalCharsOnly","gender","doForgotPassword","fr","DefaultTemplate","lazy","Empty","classes","App","props","kcContext","i18n","useDownloadTerms","currentLanguageTag","resource","tos_fr_url","tos_en_url","includes","fetch","response","text","Suspense","pageId","Template","doUseDefaultCss"],"sourceRoot":""}